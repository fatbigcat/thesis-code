generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum AuthorType {
  PROFESSOR
  AI
  STUDENT
  IMPORTED
}

enum GraderType {
  PROFESSOR
  AI
  IMPORTED
}

// MODELS

model Essay {
  id          Int          @id @default(autoincrement())
  title       String
  author      String
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  scanUrl     String?      // optional: link to scanned original essay file
  annotations Annotation[]
  grades      Grade[]
  instruction Instruction  @relation(fields: [instructionId], references: [id])
  instructionId Int
}

model Annotation {
  id          Int        @id @default(autoincrement())
  essay       Essay      @relation(fields: [essayId], references: [id])
  essayId     Int
  type        String     // e.g. "comment", "correction", "AI"
  startOffset Int
  endOffset   Int
  content     String
  modelVersion String?
  authorType  AuthorType
  color       String?
  confidence  Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Instruction {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  criteria    Criterion[]
  essays      Essay[]
}

model Criterion {
  id             Int           @id @default(autoincrement())
  instruction    Instruction   @relation(fields: [instructionId], references: [id])
  instructionId  Int
  name           String
  description    String?
  grades         Grade[]
  weights        CriterionWeight[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model CriterionWeight {
  id            Int         @id @default(autoincrement())
  criterion     Criterion   @relation(fields: [criterionId], references: [id])
  criterionId   Int
  modelVersion  String
  weight        Float
  maxScore      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Grade {
  id          Int         @id @default(autoincrement())
  essay       Essay       @relation(fields: [essayId], references: [id])
  essayId     Int
  criterion   Criterion   @relation(fields: [criterionId], references: [id])
  criterionId Int
  score       Float
  grader      GraderType
  confidence  Float?
  comment     String?
  modelVersion String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@unique([essayId, criterionId])
}
