generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum AuthorType {
  PROFESSOR
  AI
  STUDENT
  IMPORTED
}

enum GraderType {
  PROFESSOR
  AI
  IMPORTED
}

// MODELS

model Essay {
  id                Int              @id @default(autoincrement())
  title             String
  author            String
  content           String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  scanUrl           String?          
  annotations       Annotation[]
  grades            Grade[]
  instructionSheet  InstructionSheet @relation(fields: [instructionSheetId], references: [id])
  instructionSheetId Int
}

model Annotation {
  id          Int        @id @default(autoincrement())
  essay       Essay      @relation(fields: [essayId], references: [id])
  essayId     Int
  type        String     //"comment", "correction", "AI"
  startOffset Int
  endOffset   Int
  content     String
  modelVersion String?
  authorType  AuthorType
  color       String?
  confidence  Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model InstructionSheet {
  id             Int             @id @default(autoincrement())
  type           String          //razlagalni 
  theme          String
  title          String
  prompt         String
  languagePrompt String?         
  time           String
  specifications Specification[]
  essays         Essay[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Specification {
  id                 Int              @id @default(autoincrement())
  instructionSheet   InstructionSheet @relation(fields: [instructionSheetId], references: [id])
  instructionSheetId Int
  label              String           // "A", "B", "C", "Č"
  title              String
  details            String
  taxonomyLevel      String
  parent             String?          // nullable
  instructions       Instruction[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Instruction {
  id              Int           @id @default(autoincrement())
  specification   Specification @relation(fields: [specificationId], references: [id])
  specificationId Int
  label           String        //"A", "B", "C", "Č"
  title           String
  details         String
  scoringGuidelines String
  parent          String?       // nullable, if an instruction is a sub-instruction
  grades          Grade[] // because we have several essays graded against the same instruction
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Grade {
  id                 Int              @id @default(autoincrement())
  essay              Essay            @relation(fields: [essayId], references: [id])
  essayId            Int
  instruction        Instruction      @relation(fields: [instructionId], references: [id])
  instructionId      Int
  score              Float
  grader             GraderType
  confidence         Float?
  comment            String?
  modelVersion       String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  @@unique([essayId, instructionId])
}
